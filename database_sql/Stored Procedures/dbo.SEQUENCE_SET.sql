SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE [dbo].[SEQUENCE_SET] 
	@TABLE VARCHAR(100),
	@WHERE_FIELDS NVARCHAR(MAX) = NULL,
	@WHERE_VALUES SQL_VARIANT = NULL,
	@CUSTOM_WHERE NVARCHAR(MAX) = NULL,
	@ID INT,
	@MUTATION INT,
	@ID_FIELD NVARCHAR(MAX) = NULL,
	@SEQUENCE_FIELD NVARCHAR(MAX) = NULL,
	@DEBUG BIT = NULL
AS
BEGIN

	SET NOCOUNT ON

	IF (@SEQUENCE_FIELD IS NULL) SET @SEQUENCE_FIELD = 'SEQUENCE'
	IF (@ID_FIELD IS NULL) SET @ID_FIELD = 'ID'
	IF (@DEBUG IS NULL) SET @DEBUG = CAST(0 AS BIT)

	SET @CUSTOM_WHERE = NULLIF(@CUSTOM_WHERE, '')

	DECLARE @FIELDS TABLE(ID INT, FIELD VARCHAR(1000))
	IF @WHERE_FIELDS IS NOT NULL AND @WHERE_FIELDS <> ''
	BEGIN
		INSERT INTO @FIELDS
		SELECT * FROM DBO.StrList(CONVERT(NVARCHAR(MAX), @WHERE_FIELDS))
	END

	DECLARE @VALUES TABLE(ID INT, [VALUE] VARCHAR(1000))
	IF @WHERE_VALUES IS NOT NULL AND @WHERE_VALUES <> ''
	BEGIN
		INSERT INTO @VALUES
		SELECT * FROM DBO.StrList(CONVERT(NVARCHAR(MAX), @WHERE_VALUES))
	END
	
	DECLARE @SQL NVARCHAR(MAX) = '' 
	DECLARE @WHERESQL NVARCHAR(MAX) = ''

	-- FASE 1: Volgordes opnieuw inzetten
	SET @SQL = 'DECLARE @tt TABLE(SEQUENCE int identity, ID int)
INSERT INTO @tt 
SELECT '+ @ID_FIELD +' FROM '+ @TABLE+' WITH (NOLOCK)'

	IF ((SELECT COUNT(*) FROM @FIELDS) > 0 AND (SELECT COUNT(*) FROM @VALUES) > 0 AND (SELECT COUNT(*) FROM @VALUES) = (SELECT COUNT(*) FROM @FIELDS)) OR @CUSTOM_WHERE IS NOT NULL
	BEGIN
		SET @WHERESQL = CHAR(10) + 'WHERE' + CHAR(10)

		IF (SELECT COUNT(*) FROM @FIELDS) > 0
		BEGIN
			SELECT @WHERESQL = @WHERESQL +  CASE WHEN ROW_NUMBER() OVER(ORDER BY f.id) >1 THEN 'AND ' ELSE CHAR(9) END + ' ' + FIELD +' = ' + v.VALUE + CHAR(10)
			FROM @FIELDS F
			LEFT JOIN @VALUES v ON v.ID = f.ID
		END
		
		IF @CUSTOM_WHERE IS NOT NULL
		BEGIN
			IF (SELECT COUNT(*) FROM @FIELDS) > 0
				SET @WHERESQL = @WHERESQL + 'AND'
			ELSE
				SET @WHERESQL = @WHERESQL + CHAR(9)

			SET @WHERESQL = @WHERESQL + ' '+CONVERT(NVARCHAR(MAX), @CUSTOM_WHERE) + CHAR(10)
			
		END
	END
	ELSE IF (SELECT COUNT(*) FROM @FIELDS) > 0 OR (SELECT COUNT(*) FROM @VALUES) > 0 OR (SELECT COUNT(*) FROM @VALUES) <> (SELECT COUNT(*) FROM @FIELDS)
	BEGIN
		RAISERROR('Onvolledige/Ongelijke wheres', 15,15)
		RETURN 'Error: Onvolledige/Ongelijke wheres'
	END

	SET @SQL = @SQL + @WHERESQL

	SET @SQL = @SQL + 'ORDER BY '+ @SEQUENCE_FIELD

	SET @SQL = @SQL + CHAR(10) + CHAR(10) +
			   'UPDATE '+ @TABLE +' SET '+ @SEQUENCE_FIELD +' = tt.SEQUENCE'+CHAR(10)+
			   'FROM @tt tt INNER JOIN '+ @TABLE +' ON '+ @TABLE +'.'+ @ID_FIELD +' = tt.ID'+CHAR(10)

	PRINT @SQL
	IF @DEBUG = 0
	BEGIN
		PRINT 'executed'
		EXEC sp_executesql @SQL
	END
	ELSE SELECT @SQL AS SQL
	
	-- FASE 2: Mutatie doorvoeren op ID
	SET @SQL = 'DECLARE @CURRENT_SEQUENCE INT
SELECT @CURRENT_SEQUENCE = '+ @SEQUENCE_FIELD +' FROM '+ @TABLE +' WHERE ' + @ID_FIELD +' = ' + CONVERT(NVARCHAR(MAX), @ID) +'

DECLARE @NEW_SEQUENCE int
SET @NEW_SEQUENCE = (@CURRENT_SEQUENCE + '+ CONVERT(NVARCHAR(MAX), @MUTATION) +')

UPDATE '+ @TABLE +' SET '+ @SEQUENCE_FIELD +' = @NEW_SEQUENCE WHERE '+ @ID_FIELD +' = '+CONVERT(NVARCHAR(MAX), @ID)

	SET @SQL = @SQL +CHAR(10)+'UPDATE '+ @TABLE +' SET'
		   + CHAR(10) + CHAR(9) + @SEQUENCE_FIELD +' = '+ @SEQUENCE_FIELD +' + IIF('+CONVERT(NVARCHAR(MAX), @MUTATION)+' > 0, -1, 1)'
		   + COALESCE(NULLIF(@WHERESQL,''),CHAR(10)+'WHERE 1=1'+CHAR(10))
		   + 'AND '+CONVERT(NVARCHAR(MAX), @ID_FIELD)+' <> '+CONVERT(NVARCHAR(MAX), @ID)+CHAR(10)
		   + 'AND (
	(('+CONVERT(NVARCHAR(MAX), @MUTATION)+' > 0) AND ('+ @SEQUENCE_FIELD +' >= @CURRENT_SEQUENCE AND '+ @SEQUENCE_FIELD +' <= @NEW_SEQUENCE))
	OR
	(('+CONVERT(NVARCHAR(MAX), @MUTATION)+' < 0) AND ('+ @SEQUENCE_FIELD +' >= @NEW_SEQUENCE AND '+ @SEQUENCE_FIELD +' <= @CURRENT_SEQUENCE))
)'
	
	PRINT @SQL
	IF @DEBUG = 0
		EXEC sp_executesql @SQL
	ELSE SELECT @SQL AS SQL
END

GO
