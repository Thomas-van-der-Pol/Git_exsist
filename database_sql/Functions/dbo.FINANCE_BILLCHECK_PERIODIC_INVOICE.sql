SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE FUNCTION [dbo].[FINANCE_BILLCHECK_PERIODIC_INVOICE](@DATE DATE)		
	RETURNS	@DATA TABLE (
		FK_FINANCE_INVOICE_PERIODIC INT,
		FK_CORE_LABEL INT,
		FK_CRM_RELATION INT,
		FK_CRM_CONTACT INT,
		FK_FINANCE_INVOICE_COLLECT_INTERVAL INT,
		DATE_FROM DATE,
		DATE_TO DATE,
		QUANTITY DECIMAL(15,6),
		QUANTITY_MONTH DECIMAL(15,6),
		PRICE DECIMAL(15,6),
		INTERVALMONTHS INT,
		FK_FINANCE_VAT INT,
		FK_FINANCE_LEDGER INT,
		[DESCRIPTION] NVARCHAR(4000)
	)
AS
BEGIN

	INSERT INTO @DATA
	SELECT 
		FID.ID,
		R.FK_CORE_LABEL,
		FID.FK_CRM_RELATION,
		COALESCE(R.FK_CRM_CONTACT_FINANCE, FIRST_CONTACT.ID),
		ISNULL(R.FK_FINANCE_INVOICE_COLLECT_INTERVAL, [dbo].[FINANCE_INVOICE_COLLECT_INTERVAL_SEPARATED]()),
		BILLINGCALENDAR.STARTDATE,
		CASE WHEN FID.DATE_END_BILLING < BILLINGCALENDAR.ENDDATE 
		  THEN FID.DATE_END_BILLING -- Afwijkende einddatum voor het einde van het kwartaal
		  ELSE BILLINGCALENDAR.ENDDATE 
		END,
		ROUND(ISNULL(FID.QUANTITY, 0), 2),
		ROUND([dbo].[DATE_FRACTION_BETWEENDATES](
			BILLINGCALENDAR.STARTDATE, 
			CASE WHEN FID.DATE_END_BILLING < BILLINGCALENDAR.ENDDATE
			  THEN FID.DATE_END_BILLING -- Afwijkende einddatum voor het einde van het kwartaal
			  ELSE BILLINGCALENDAR.ENDDATE 
			END
		),2) AS QUANTITY_MONTHS,
		ROUND(ISNULL(FID.PRICE, 0), 2),
		BF.INTERVALMONTHS,
		IIF(R.VAT_LIABLE = 1, FID.FK_FINANCE_VAT, CL.FK_FINANCE_VAT_SHIFTED),
		FID.FK_FINANCE_LEDGER,
		FID.[DESCRIPTION]
	FROM FINANCE_INVOICE_PERIODIC FID WITH (NOLOCK)
	JOIN FINANCE_BILLINGFREQUENCY BF WITH (NOLOCK) ON BF.ID = FID.FK_FINANCE_BILLINGFREQUENCY
	JOIN CRM_RELATION R WITH (NOLOCK) ON R.ID = FID.FK_CRM_RELATION
	OUTER APPLY (
		SELECT TOP 1 CC.ID
		FROM CRM_CONTACT CC WITH (NOLOCK)
		WHERE CC.FK_CRM_RELATION = R.ID
		  AND CC.ACTIVE = 1
	) FIRST_CONTACT
	LEFT JOIN CORE_LABEL CL WITH (NOLOCK) ON CL.ID = R.FK_CORE_LABEL
	OUTER APPLY(
		SELECT
			COALESCE(DATEADD(DAY, 1, FID.DATE_BILLED_UNTIL), FID.DATE_START_BILLING) AS STARTDATE,
			CASE
				WHEN (FID.DATE_END_BILLING IS NOT NULL AND FID.DATE_END_BILLING < FID.DATE_BILLED_UNTIL) THEN FID.DATE_END_BILLING -- Al vooruitgefactureerd en nog te crediteren.
				WHEN BF.INTERVALMONTHS = 1 THEN EOMONTH(@DATE)
				WHEN BF.INTERVALMONTHS = 3 THEN [dbo].[DATE_FRACTION_QUARTER_END](@DATE)
				WHEN BF.INTERVALMONTHS = 12 THEN DATEADD(DAY, -1, DATEADD(MONTH, bf.INTERVALMONTHS, COALESCE(DATEADD(DAY, 1, FID.DATE_BILLED_UNTIL), FID.DATE_START_BILLING)))
				WHEN BF.INTERVALMONTHS = -12 THEN DATEADD (dd, -1, DATEADD(yy, DATEDIFF(yy, 0, @DATE) +1, 0)) -- Kalenderjaar, tot 31-12 van het geselecteerde jaar!
			END AS ENDDATE
	) BILLINGCALENDAR
	WHERE FID.ACTIVE = 1
	  AND R.ACTIVE = 1
	  AND FID.DATE_START_BILLING <= @DATE -- Ingangsdatum op of voor peildatum
	  AND FID.DATE_START_BILLING IS NOT NULL -- Maar in elk geval gevuld
	  AND (	
		-- Einddatum in de toekomst
		FID.DATE_END_BILLING >= @DATE 
		-- of einddatum leeg
		OR 
		FID.DATE_END_BILLING IS NULL  
		-- of wel al geeindigd maar nog een slot factuur maken
		OR (
		  FID.DATE_END_BILLING IS NOT NULL 
		  AND 
		  FID.DATE_END_BILLING <> FID.DATE_BILLED_UNTIL
		)
	  )
	  AND (
	    -- moet weer gefactureerd worden
		FID.DATE_BILLED_UNTIL < @DATE 
		-- is nog niet gefactureerd
		OR 
		FID.DATE_BILLED_UNTIL IS NULL
		-- of al vooruitgefactureerd en nog te crediteren
		OR (
		  FID.DATE_END_BILLING IS NOT NULL 
		  AND 
		  FID.DATE_END_BILLING < FID.DATE_BILLED_UNTIL
		) 
	)
	AND (BF.INTERVALMONTHS <> 0) -- Geen eenmalige producten

	RETURN

END



GO
