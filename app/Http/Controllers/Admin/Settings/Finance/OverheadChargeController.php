<?php

namespace App\Http\Controllers\Admin\Settings\Finance;

use App\Models\Admin\Finance\OverheadCharge;
use Illuminate\Support\Facades\Auth;
use KJ\Core\controllers\AdminBaseController;
use Illuminate\Http\Request;
use KJLocalization;

class OverheadChargeController extends AdminBaseController
{
    protected $model = 'App\Models\Admin\Finance\OverheadCharge';

    protected $allColumns = ['ID', 'ACTIVE', 'DATE_START', 'DATE_END', 'PERCENTAGE'];

    protected $datatableDefaultSort = array(
        [
            'field' => 'DATE_START',
            'sort'  => 'ASC'
        ],
        [
            'field' => 'DATE_END',
            'sort'  => 'ASC'
        ]
    );

    protected $detailViewName = 'admin.settings.finance.overhead_charge.detail';

    protected $saveParentIDField = 'FK_CORE_LABEL';

    protected function authorizeRequest($method, $parameters)
    {
        return Auth::guard()->user()->hasPermission(config('permission.FACTURATIE'));
    }

    protected function beforeDatatable($datatable)
    {
        $datatable->addColumn('DATE_START_FORMATTED', function(OverheadCharge $overheadCharge) {
                return $overheadCharge->getDateStartFormattedAttribute();
            })
            ->addColumn('DATE_END_FORMATTED', function(OverheadCharge $overheadCharge) {
                return $overheadCharge->getDateEndFormattedAttribute();
            })
            ->addColumn('PERCENTAGE_FORMATTED', function(OverheadCharge $overheadCharge) {
                return $overheadCharge->getPercentageFormattedAttribute();
            });
    }

    public function save(Request $request)
    {
        $start = ( $request->get('DATE_START') ?? '' );
        $end = ( $request->get('DATE_END') ?? '' );

        // Check overhead charge between inserted period
        if($start > '') {
            $start_date = date('Y-m-d', strtotime($start));
            $end_date = date('Y-m-d', strtotime($end));

            $duplicate = OverheadCharge::where(function ($q) use ($start_date, $end_date) {
                $q->whereRaw("(DATE_START >= ? AND DATE_END <= NULLIF(?, '1970-01-01'))", [$start_date, $end_date]) // @Van en @Tot tussen bestaande regel
                ->orWhereRaw("(? >= DATE_START AND NULLIF(?, '1970-01-01') <= DATE_END)", [$start_date, $end_date]) // Van en Tot tussen @Van en @Tot
                ->orWhereRaw("(NULLIF(?, '1970-01-01') >= DATE_START AND NULLIF(?, '1970-01-01') <= DATE_END)", [$end_date, $end_date]) // @Tot tussen Van en Tot
                ->orWhereRaw("(? >= DATE_START AND ? <= DATE_END)", [$start_date, $start_date]); // @Van tussen Van en Tot
            });

            if ($request->get('ID') != $this->newRecordID) {
                $duplicate->where('ID', '<>', $request->get('ID'));
            }

            if($duplicate->count() > 0) {
                return response()->json([
                    'message' => KJLocalization::translate('Admin - Financieel', 'Er bestaat al een kosten opslag met deze datum', 'Er bestaat al een kosten opslag met deze datum'),
                    'success'=> false
                ], 200);
            }
        }

        return parent::save($request); // TODO: Change the autogenerated stub
    }


    public function allByLabelDatatable(Request $request, int $ID)
    {
        $this->whereClause = array(
            ['FK_CORE_LABEL', $ID],
            ['ACTIVE', true]
        );

        return parent::allDatatable($request);
    }

    public function delete(int $id)
    {
        $item = $this->find($id);

        if ($item) {
            if ($item->ACTIVE) {
                $status = 'gearchiveerd';
            } else {
                $status = 'geactiveerd';
            }

            $item->ACTIVE = !$item->ACTIVE;
            $result = $item->save();

            return response()->json([
                'success' => $result,
                'message' => KJLocalization::translate('Algemeen', 'Item kon niet worden ' . $status, 'Item kon niet worden ' . $status)
            ]);
        } else {
            return response()->json([
                'success' => false,
                'message' => KJLocalization::translate('Algemeen', 'Item niet (meer) gevonden', 'Item niet (meer) gevonden')
            ]);
        }
    }
}